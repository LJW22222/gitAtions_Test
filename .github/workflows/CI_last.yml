name: CI_last1

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          host port: 3306
          container port: 3307
          character set server: 'utf8'
          mysql version: '8.0'
          mysql database: 'testDB'
          mysql user: 'root'
          mysql password: ${{ secrets.DB_PASSWORD }}

      - name: Git File Clone
        uses: actions/checkout@v3

      - name: gradlew 권한 부여
        run: chmod +x ./gradlew

      - name: application.yml 파일 생성
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: 자바 버전 설정 및 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle packages 캐시 작업
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-



      - name: Spring Project 파일 Build
        run: ./gradlew build

      - name: Spring Test 코드 실행
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: 123456
        run: ./gradlew test

#      - name: Docker Login
#        run : docker login -u ${{ secrets.DOCKER_USERNAME}} -p ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Docker Image Build 및 Push
#        run : |
#          docker build --platform linux/arm64/v8 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
#          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#
#      - name: SSH 연결 및 Docker Image 업로드
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          port: ${{ secrets.SSH_PORT }}
#          script: |
#            # 변경할 디렉토리로 이동
#            cd app
#
#            # 로그 파일 삭제 (파일이 존재하는지 확인)
#            if [ -f "concal.log" ]; then
#              sudo rm concal.log
#            fi
#
#            # 모든 컨테이너 중지 및 제거
#            if [ "$(sudo docker ps -q)" ]; then
#              sudo docker stop $(sudo docker ps -q)
#            fi
#
#            if [ "$(sudo docker ps -a -q)" ]; then
#              sudo docker rm $(sudo docker ps -a -q)
#            fi
#
#            # 이미지 삭제 (이미지가 사용 중일 경우 강제로 삭제)
#            if sudo docker image inspect ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} > /dev/null 2>&1; then
#              sudo docker rmi -f ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#            fi
#
#            # 최신 이미지 가져오기
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#
#            # 포트 50000에서 실행 중인 컨테이너 중지 및 제거
#            CONTAINER_ID=$(sudo docker ps --filter "publish=50000" -q)
#            if [ -n "$CONTAINER_ID" ]; then
#              echo "Stopping and removing existing container using port 50000..."
#              sudo docker stop $CONTAINER_ID
#              sudo docker rm $CONTAINER_ID
#            fi
#
#            # 새로운 Docker 컨테이너 실행 (명시적으로 이름을 지정)
#            CONTAINER_NAME=${{ secrets.DOCKER_REPO }}
#            sudo docker run -p 50000:8080 --name $CONTAINER_NAME -d ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#
#            # 컨테이너 실행 확인 후 로그 실시간 추적 및 저장
#            if sudo docker ps --filter "name=$CONTAINER_NAME" | grep -q "$CONTAINER_NAME"; then
#              sudo docker logs -f $CONTAINER_NAME &> concal.log &
#            else
#              echo "Container '$CONTAINER_NAME' is not running."
#              exit 1
#            fi
#
#            # 사용하지 않는 Docker 이미지 정리
#            sudo docker image prune -f